---
title: "Omics - Analysis of large-scale biomolecular datasets Introduction to R"
subtitle: |
  KIMN20 - LTH
author: 
  - "Daniel Nilsson"
  - "Massimiliano Volpe"
date: today
format: 
  revealjs:
    width: 1050
    height: 700
    margin: 0.1
    center: false
    self-contained: true
    css: custom.css
    logo: assets/lth-logo.png
    code-fold: false
  ipynb: default
engine: knitr
execute:
  enabled: true
  echo: true
preview: false
---

## Introduction to R

### Course date: 04 November 2025
### Last modified: {{< meta date >}}

## Welcome to R Programming! üêß

This presentation will teach you the fundamentals of R programming for data analysis.

### What we'll cover:
- R language basics and getting help
- Working with packages
- Variables and data types
- Data structures (vectors, matrices, lists, data frames)
- Reading data from files
- Writing functions

---

## What R is?

**R is a programming language and environment designed for statistical computing and graphics.**

### Key Characteristics:
- **Programming Language**: High-level language for data analysis and visualization
- **Programming Platform**: Complete environment with interpreter and development tools
- **Open-Source Project**: Driven by the R core team and global community
- **Statistical Powerhouse**: Specialized for statistical analysis and modeling
- **General-Purpose Tool**: Can handle diverse computational tasks
- **Idea-to-Implementation Bridge**: Transforms concepts into working solutions

### What R is NOT:
- A replacement for statistical expertise
- The "best" programming language for every task
- Always the most elegant or efficient solution

### Yet R Excels At:
- Statistical computing and data analysis
- High-quality graphics and visualization
- Rapid prototyping of analytical methods
- Integration with other scientific tools

---

## Why R in Bioinformatics?

**R is the de facto standard for bioinformatics analysis.**

### Statistical Power:
- Comprehensive statistics and cutting-edge methods
- Reproducible, script-based research

### Specialized Ecosystem:
- **Bioconductor**: 2,000+ packages for genomics, proteomics, sequencing
- **CRAN**: 18,000+ general-purpose packages
- Complete analysis pipelines

### Visualization Excellence:
- Publication-quality graphics (ggplot2)
- Interactive and specialized bioinformatics plots

### Active Community:
- Regular updates and new developments
- Integrates with Python, databases, web services

---

## Getting Started with R

### Opening R/RStudio

- **Command line**: Type `R` in terminal
- **RStudio**: Download from https://posit.co/download/rstudio-desktop/
- **Web-based**: Use RStudio Cloud or Google Colab with R kernel
- **RStudio Server**:[https://130.235.8.214/rstudio](https://130.235.8.214/rstudio)

### Your First R Commands

```{r eval=TRUE}
# This is a comment - it won't execute
print("Hello, R!")
```

Try running this command in your R console!

---

### R as a Calculator

```{r eval=TRUE}
# Basic arithmetic
2 + 3
10 - 4
5 * 6
20 / 4
2^3
```

---

## Getting Help

### Built-in Help Functions

```{r eval=TRUE}
# Get help for a function
?print
help(print)

# Search for functions
??plot
help.search("plot")
```

### Help for Packages

```{r eval=TRUE}
# Get help for installed packages
help(package = "base")

# Vignettes (detailed tutorials)
vignette()
# vignette("ggplot2")  # Commented out to prevent browser opening
```

---

## Working with Packages

### Installing Packages

```{r eval=FALSE}
# Commented out to prevent browser opening
# Install from CRAN (main repository)
install.packages("tidyverse")

# Install multiple packages
install.packages(c("dplyr", "ggplot2", "readr"))
```

### Loading Packages

```{r eval=TRUE}
# Load a package
library(tidyverse)

# Load with require() (returns TRUE/FALSE)
require(tidyverse)
```

---

### Package Management

```{r eval=TRUE}
# See loaded packages
sessionInfo()
```

```{r eval=FALSE}
# Update packages
update.packages()

# Remove packages
remove.packages("package_name")
```

---

## Bioconductor

**Bioconductor** is the premier repository for R packages in bioinformatics and computational biology.

### Key Features:
- **Specialized Tools**: Packages for genomics, proteomics, sequencing analysis
- **Quality Assurance**: Rigorous review process ensures high-quality, well-documented packages
- **Integrated Workflows**: Complete analysis pipelines from raw data to publication
- **Active Community**: Regular updates and new package releases

---

### Installing Bioconductor Packages

```{r eval=FALSE}
# Install Bioconductor manager (one time)
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

# Install packages
BiocManager::install("DESeq2")        # RNA-seq analysis
BiocManager::install("edgeR")         # Differential expression
BiocManager::install("limma")         # Microarray analysis
BiocManager::install("GenomicRanges") # Genomic intervals
```

### Popular Bioconductor Packages:
- **DESeq2**: RNA-seq differential expression analysis
- **edgeR**: Alternative for RNA-seq and count data
- **limma**: Linear models for microarray data
- **Biostrings**: DNA/RNA sequence manipulation
- **GenomicRanges**: Working with genomic coordinates

---

## Variables and Assignment

A variable is a named storage location in memory that holds a value or object. Variables allow you to store, reference, and manipulate data throughout your R session.

### Creating Variables

```{r eval=TRUE}
# Assignment operators
x <- 5
y = 10
20 -> z

# Print variables
x
print(y)
```

**Note**: `<-` is preferred for assignment, `=` is used for function arguments.

---

### Variable Names

```{r eval=TRUE}
# Valid names
my_variable <- 1
myVariable <- 2
.variable <- 3
variable. <- 4

# Invalid names (would cause errors)
# 1variable <- 5
# my-variable <- 6
# my variable <- 7
```

---

### Variable Naming Conventions

Rules for valid variable names in R:

#### Valid Names:
- Start with a letter or dot (not followed by number)
- Contain letters, numbers, dots, or underscores
- Examples: `my_var`, `myVariable`, `.hidden`, `var2`

#### Invalid Names:
- Start with number: `2variable` ‚ùå
- Contain spaces: `my variable` ‚ùå
- Use hyphens: `my-variable` ‚ùå
- Start with dot + number: `.2way` ‚ùå

---

### Variable Naming Conventions

Rules for valid variable names in R:

#### Reserved Words (cannot use):
- `if`, `else`, `repeat`, `while`, `function`
- `for`, `in`, `next`, `break`
- `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`
- `NA`, `NA_integer_`, `NA_real_`, `NA_complex_`, `NA_character_`
- Built-in functions: `c`, `q`, `t`, `C`, `D`, `I`
- Avoid using: `T`, `F` (short for TRUE/FALSE)

---

### Variable Naming Style

Best practices for readable, maintainable code:

#### Make Names Informative:
- Use descriptive names: `patient_ages` instead of `x`
- Avoid cryptic abbreviations: `genotypes` instead of `fsjht45jkhsdf4`

#### Choose a Consistent Convention:
- **snake_case**: `my_variable`, `patient_data`
- **camelCase**: `myVariable`, `patientData`
- **dot.case**: `my.variable`, `patient.data`
- Pick one and stick with it throughout your code

---

### Variable Naming Style

Best practices for readable, maintainable code:

#### Keep Names Reasonable Length:
- Short enough: `tmp` for temporary variables
- Long enough: `gene_expression_matrix` not `g_e_m`
- Avoid: `my.variable.2` ‚Üí use `my.variable2`

#### Common Conventions:
- `i`, `j`, `k`: Loop counters
- `tmp`: Temporary variables
- `df`: Data frames
- `n`: Counts or lengths
- `idx`: Indices

---

## Data Types and Classes

### Basic Data Types

```{r eval=TRUE}
# Numeric (double)
num <- 3.14
class(num)

# Integer
int <- 42L # L forces the number to be stored as integer
class(int)

# Character (string)
text <- "Hello World"
class(text)

# Logical (boolean)
logic <- TRUE
class(logic)
```

---

### Type Checking

```{r eval=TRUE}
# Check data types
is.numeric(num)
is.integer(int)
is.character(text)
is.logical(logic)

# Check if it's a specific type
is.double(num)
is.integer(text)
```

---

## Type Casting and Conversion

### Converting Between Types

```{r eval=TRUE}
# Numeric to character
as.character(3.14)

# Character to numeric
as.numeric("42.5")

# Numeric to integer
as.integer(3.9)

# Logical to numeric
as.numeric(TRUE)  # Returns 1
as.numeric(FALSE) # Returns 0
```

---

### Common Conversions

```{r eval=TRUE}
# String to logical
as.logical("TRUE")
as.logical("false")

# Factor to character
factor_var <- factor(c("A", "B", "A"))
as.character(factor_var)
```

---

## Basic String Operations

### String Basics

```{r eval=TRUE}
# Create strings
name <- "Alice"
greeting <- 'Hello'

# String length
nchar(name)

# Combine strings
paste("Hello", "World")
paste("Hello", "World", sep = " ")
```

---

### String Manipulation

```{r eval=TRUE}
# Substring
substr("Hello World", 1, 5)

# Upper/lower case
toupper("hello")
tolower("WORLD")

# Split strings
strsplit("Hello World", " ")
```

---

## Complex Data Structures

R provides powerful data structures for organizing and manipulating data efficiently.

Using basic data types (numeric, logical, character), we can construct more complex data structures:

![Data Structures in R](assets/data_structures.png)

### Overview of R Data Structures:
- **Vectors**: One-dimensional arrays of the same data type
- **Matrices**: Two-dimensional arrays of the same data type
- **Lists**: Ordered collections that can contain different data types
- **Data Frames**: Two-dimensional tables (like spreadsheets) with mixed data types

These structures form the foundation for data analysis in bioinformatics!

---

## Vectors
Vectors (or Atomic Vectors) are one-dimensional arrays of the same data type.

### Creating Vectors

```{r eval=TRUE}
# Numeric vector
numbers <- c(1, 2, 3, 4, 5)
numbers

# Character vector
fruits <- c("apple", "banana", "orange")
fruits

# Logical vector
booleans <- c(TRUE, FALSE, TRUE)
booleans
```

---

### Vector Operations

```{r eval=TRUE}
# Vector arithmetic
x <- c(1, 2, 3)
y <- c(4, 5, 6)
x + y
x * y

# Vector functions
length(numbers)
sum(numbers)
mean(numbers)
```

---

### Vector Indexing

```{r eval=TRUE}
# Access elements
fruits[1]       # First element
fruits[2:3]     # Second and third
fruits[c(1,3)]  # First and third

# Negative indexing (exclude)
fruits[-1]      # All except first
fruits[-c(1,3)] # Exclude first and third
```

---

### Named Vectors

```{r eval=TRUE}
# Create named vector
ages <- c(Alice = 25, Bob = 30, Carol = 35)
ages

# Access by name
ages["Alice"]
ages[c("Alice", "Carol")]
```

---

## Matrices
Matrices are two-dimensional arrays of the same data type.

### Creating Matrices

```{r eval=TRUE}
# Create matrix from vector
matrix(1:9, nrow = 3, ncol = 3)

# By row or column
matrix(1:6, nrow = 2, byrow = TRUE)
matrix(1:6, nrow = 2, byrow = FALSE)
```

---

### Matrix Operations

```{r eval=TRUE}
# Create sample matrix
m <- matrix(1:4, nrow = 2)
m

# Matrix dimensions
dim(m)
nrow(m)
ncol(m)
```

---

### Matrix Indexing

```{r eval=TRUE}
# Access elements
m[1, 2]    # Row 1, Column 2
m[1, ]     # Entire row 1
m[, 2]     # Entire column 2

# Multiple elements
m[1:2, 1]  # Rows 1-2, Column 1
```

---

### Matrix Arithmetic

```{r eval=TRUE}
# Matrix operations
m1 <- matrix(1:4, nrow = 2)
m2 <- matrix(5:8, nrow = 2)

m1 + m2
m1 * m2  # Element-wise
m1 %*% m2 # Matrix multiplication
```

---

## Lists
Lists are ordered collections that can contain different data types.

### Creating Lists

```{r eval=TRUE}
# Simple list
my_list <- list(1, "hello", TRUE)
my_list
```

---

### Creating Lists

```{r eval=TRUE}
# Named list
person <- list(
  name = "Alice",
  age = 25,
  scores = c(85, 90, 88)
)
person
```

---

### Accessing List Elements

```{r eval=TRUE}
# By index
person[[1]]  # First element
person[[3]]  # Third element

# By name
person$name
person[["age"]]
person$scores
```

---

### List Operations

```{r eval=TRUE}
# List length
length(person)

# Names of elements
names(person)

# Add elements
person$city <- "Stockholm"
person
```

---

### List Operations
```{r eval=TRUE}
# Remove elements
person$city <- NULL
person
```

---

## Data Frames
Data Frames are two-dimensional tables (like spreadsheets) with mixed data types

### Creating Data Frames

```{r eval=TRUE}
# Create data frame
students <- data.frame(
  name = c("Alice", "Bob", "Carol"),
  age = c(20, 21, 19),
  grade = c("A", "B", "A")
)
students
```

---

### Data Frame Properties

```{r eval=TRUE}
# Structure
str(students)

# Dimensions
dim(students)
nrow(students)
ncol(students)

# Column names
names(students)
```

---

### Data Frame Indexing

```{r eval=TRUE}
# Access columns
students
students$name
students[["age"]]
students[, 2]  # Second column

# Access rows
students[1, ]  # First row
students[1:2, ] # First two rows
```

---

```{r eval=TRUE}
students
# Access specific elements
students[1, 2]  # Row 1, Column 2
students[1, "age"] # Row 1, age column
```

---

### Data Frame Operations

```{r eval=TRUE}
# Add column
students$passed <- c(TRUE, TRUE, FALSE)
students

# Summary statistics
summary(students)
```

---

### Data Frame Operations

```{r eval=TRUE}
# View first/last rows
head(students)
tail(students)
```

---

## Reading Data

### Reading CSV Files

```{r eval=TRUE}
# Read CSV file
data <- read.csv("assets/data.csv")
head(data)
```

---

### Reading CSV Files

Factors in R are a special data type used to represent categorical data with predefined levels. They're like labeled categories that can be ordered or unordered. stringsAsFactors = FALSE prevents automatic conversion of strings to factors.

```{r eval=TRUE}
# With custom options
data <- read.csv("assets/data.csv", 
                 header = TRUE,
                 sep = ",",
                 stringsAsFactors = FALSE)
head(data)
```

---

### Reading Excel Files

```{r eval=TRUE}
# Install readxl if needed
# install.packages("readxl")
library(readxl)

# Read Excel file
excel_data <- read_excel("assets/data.xlsx")
head(excel_data)

# Read specific sheet
sheet_data <- read_excel("assets/data.xlsx", sheet = "Sheet 1")
head(sheet_data)
```

---

### Other File Formats

```{r eval=TRUE}
# Read tab-separated file
tsv_data <- read.delim("assets/data.tsv")
head(tsv_data)

# Read from URL
# url_data <- read.csv("https://example.com/data.csv")

# Write data
write.csv(students, "students.csv")
write.csv(students, "students.csv", row.names = FALSE)
```

---

## Functions

Functions are reusable blocks of code that perform specific tasks. They help organize code, reduce repetition, and make programs more modular and maintainable.

![R Functions Overview](assets/r_functions.png)

### Why Use Functions?
- **Reusability**: Write once, use many times
- **Organization**: Break complex tasks into smaller, manageable pieces
- **Maintainability**: Easier to debug and update code
- **Abstraction**: Hide implementation details

Functions take inputs (arguments), perform operations, and return outputs (results).

---

### Writing Functions

#### Basic Function Structure

```{r eval=TRUE}
# Simple function
greet <- function(name) {
  message <- paste("Hello,", name, "!")
  return(message)
}

# Call the function
greet("Alice")
```

#### Functions with Multiple Parameters

```{r eval=TRUE}
# Function with multiple parameters
calculate_bmi <- function(weight_kg, height_m) {
  bmi <- weight_kg / (height_m^2)
  return(bmi)
}

# Usage
calculate_bmi(70, 1.75)
```

---

#### Functions with Default Values

```{r eval=TRUE}
# Function with defaults
power_function <- function(x, power = 2) {
  result <- x^power
  return(result)
}

# Usage
power_function(3)      # Uses default power = 2
power_function(3, 3)   # Uses power = 3
```

---

#### Functions with Conditional Logic

```{r eval=TRUE}
# Function with if-else
grade_letter <- function(score) {
  if (score >= 90) {
    return("A")
  } else if (score >= 80) {
    return("B")
  } else if (score >= 70) {
    return("C")
  } else {
    return("F")
  }
}

# Usage
grade_letter(85)
grade_letter(92)
```

---

## Quiz Time! üß†

### Question 1
Which operator is used for assignment in R?
- A) `=`
- B) `<-`
- C) Both A and B

### Question 2
What function creates a vector in R?
- A) `vector()`
- B) `c()`
- C) `make_vector()`

### Question 3
How do you access the first element of a vector named `my_vec`?
- A) `my_vec[0]`
- B) `my_vec[1]`
- C) `my_vec.first`

---

### Quiz Time! üß†
*(Answers: 1-C, 2-B, 3-B)*

---

## Next Steps

### What to Learn Next

- Data manipulation with dplyr
- Data visualization with ggplot2
- Statistical analysis functions
- Writing R scripts and RMarkdown
- Advanced data structures
- Working with dates and times

### Resources

- [R for Data Science](https://r4ds.had.co.nz/) - Free online book
- [RStudio Education](https://education.rstudio.com/) - Learning resources
- [CRAN Task Views](https://cran.r-project.org/web/views/) - Package collections
- [R Documentation](https://www.rdocumentation.org/) - Function reference

---

## Thank You!

You've completed the basic R programming tutorial!

### Remember:
- Use `?function_name` for help
- Install packages with `install.packages()`
- Load packages with `library()`
- Practice regularly with real data

### Questions?
Feel free to ask your instructor or classmates!

üêß Happy R programming! üêß

---

## Practice Time! üíª

### Exercise 1: Variables and Types√ü

1. Create variables for your name, age, and height
2. Check their data types with `class()`
3. Convert your age to character and height to integer

```{r eval=TRUE}
# Your code here
name <- "Your Name"
age <- 25
height <- 1.75

class(name)
class(age)
class(height)

as.character(age)
as.integer(height)
```

---

### Exercise 2: Vectors and Data Frames

1. Create a vector of your favorite numbers
2. Create a data frame with names and scores
3. Calculate the mean of the scores

```{r eval=TRUE}
# Your code here
numbers <- c(1, 5, 10, 15, 20)

scores_df <- data.frame(
  name = c("Alice", "Bob", "Carol"),
  score = c(85, 92, 78)
)

mean(scores_df$score)
```
